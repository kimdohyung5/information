1. enum 클래스 사용법
enum class Day(
    val label: String
) {
    MON("Monday"),
    TUE("Tuesday"),
    WED("Wednesday"),
    THU("Thursday"),
    FRI("Friday"),
    SAT("Saturday"),
    SUN("Sunday")
    ;

    companion object {
        val LABEL_CACHE: Map<String, Day> =
            values().associateBy { it.label }

        fun findByLabel(label: String) = LABEL_CACHE[label]
    }
}

2. 숫자에 0채우기
fun Int.pad():String {
    return this.toString().padStart(2, '0')
}

3. 날짜형식만들기. 
fun formatDateTime(timestamp: Int): String {
    val sdf = SimpleDateFormat("hh:mm:aa")
    val date = java.util.Date(timestamp.toLong() * 1000)
    return sdf.format(date)
}
fun formatDecimals(item: Double): String {
    return " %.0f".format(item)
}

date: LocalDate
val result: String = DateTimeFormatter.ofPattern("dd LLLL").format(date)

4. Result형식 알아보기
   Result<T>로 된 값을 리턴받으면 onSuccess, onFailure를 통해서 T또는 throwable을 리턴받아서 
   처리할수 있다.
fun GetResult(input: String) : Result<String> {
    /*
    if(input == "success") {
        return Result.success("S")
    }
    return Result.failure(Exception("xxxx"))
     */
    return runCatching {
        if(input == "success") {            
            "Hello"
        }
        else {            
            throw Exception("forRunCatching")
        }
    }
}

fun main() {    
    val result = GetResult("success")
    result.onSuccess {
        println("SSSS ${it}")
    }.onFailure {
        println("FFFF")
    }
    val result2 = GetResult("failure")
    result2.onSuccess {
        println("SSSS")
    }.onFailure { e ->
        println("FFFF ${e.message}")
    }
}
