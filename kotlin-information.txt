
1. on ActivityResult의 대안 을 어떻게 사용할지를 보여준다.
class MainActivity : AppCompatActivity() {

    val binding by lazy { ActivityMainBinding.inflate(layoutInflater) }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(binding.root)

        // onActivityResult의 대안
        val activityResult = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) {
            if (it.resultCode == RESULT_OK) {
                val message = it.data?.getStringExtra("returnValue")
                Toast.makeText(this, message, Toast.LENGTH_LONG).show()
            }
        }

        val intent = Intent(this, SubActivity::class.java)
        intent.putExtra("from1", "hello Bundle")
        intent.putExtra("from2", 2021)

        // startActivityForResult 의 대안
        binding.btnStart.setOnClickListener { activityResult.launch(intent) }
    }
}

2. 권한도 같은 형식으로 되어 있다. 
lateinit var cameraPermission:ActivityResultLauncher<String>
lateinit var storagePermission:ActivityResultLauncher<String>

lateinit var cameraLauncher:ActivityResultLauncher<Uri>
lateinit var galleryLauncher:ActivityResultLauncher<String>
    
    
storagePermission = registerForActivityResult(ActivityResultContracts.RequestPermission()) { isGranted ->
    if(isGranted) {
        setViews()
    } else {
        Toast.makeText(baseContext, "외부저장소 권한을 승인해야 앱을 사용할 수 있습니다.", Toast.LENGTH_LONG).show()
        finish()
    }
}

cameraPermission = registerForActivityResult(ActivityResultContracts.RequestPermission()) { isGranted ->
    if(isGranted) {
        openCamera()
    } else {
        Toast.makeText(baseContext, "카메라 권한을 승인해야 카메라를 사용할 수 있습니다.", Toast.LENGTH_LONG).show()
    }
}

cameraLauncher = registerForActivityResult(ActivityResultContracts.TakePicture()) { isSuccess  ->
    if(isSuccess) { binding.imagePreview.setImageURI(photoUri) }
}

galleryLauncher = registerForActivityResult(ActivityResultContracts.GetContent()) { uri ->
    binding.imagePreview.setImageURI(uri)
}

storagePermission.launch(Manifest.permission.WRITE_EXTERNAL_STORAGE)    
    
    
3. Paging3 테스트를 위한 데이터를 가져오는 URL
https://picsum.photos/v2/list?page=1&limit=100
https://jsonplaceholder.typicode.com/todos
    
    

4. 가장 기초적인 di AppModule설정부분
@Module
@InstallIn(SingletonComponent::class)
object TrackerDataModule {

    @Provides
    @Singleton
    fun provideOkHttpClient(): OkHttpClient {
        return OkHttpClient.Builder()
            .addInterceptor(
                HttpLoggingInterceptor().apply {
                    level = HttpLoggingInterceptor.Level.BODY
                }
            )
            .build()
    }

    @Provides
    @Singleton
    fun provideOpenFoodApi(client: OkHttpClient): OpenFoodApi {
        return Retrofit.Builder()
            .baseUrl(OpenFoodApi.BASE_URL)
            .addConverterFactory(MoshiConverterFactory.create())
            .client(client)
            .build()
            .create()
    }

    @Provides
    @Singleton
    fun provideTrackerDatabase(app: Application): TrackerDatabase {
        return Room.databaseBuilder(
            app,
            TrackerDatabase::class.java,
            "tracker_db"
        ).build()
    }

    @Provides
    @Singleton
    fun provideTrackerRepository(
        api: OpenFoodApi,
        db: TrackerDatabase
    ): TrackerRepository {
        return TrackerRepositoryImpl(
            dao = db.dao,
            api = api
        )
    }
}

5. Post로 데이터를 날릴때 사용하는 부분.
@Post("signup")
suspend fun postData(@Body equest: AuthRequest)

@POST("signin")
suspend fun signIn(@Body request: AuthRequest) : TokenResponse

@GET("authenticate")
suspend fun authenticate(
	@Header("Authenticate") token: String
)

데이터를 이미지로 받기 결과 유무로 Wrapping시킨다. 
@GET("/wp-content/uploads/2022/02/220849-scaled.jpg")
    suspend fun downloadImage(): Response<ResponseBody>
    
    
    
6. TextView에 가운데 선 긋기
if(isChecked) {
            tvTodoTitle.paintFlags = tvTodoTitle.paintFlags or STRIKE_THRU_TEXT_FLAG
        } else {
            tvTodoTitle.paintFlags = tvTodoTitle.paintFlags and STRIKE_THRU_TEXT_FLAG.inv()
        }    


7. json 데이터를 공백없이 처리하기
object MapStyle {
    val json = """
    { 
    "name": "kimdo" 
    }    
    """.trimIndent()
   }




8. retrofit에서 interceptor 설정하기
val logger = HttpLoggingInterceptor().apply {
            level = HttpLoggingInterceptor.Level.BASIC
        }
        val interceptor = Interceptor { chain ->
            with(chain) {
                val newRequest = request().newBuilder()
                    .addHeader("Authorization", "Token " + "xxxx")
                    .build()
                proceed(newRequest)
            }
        }
        val okHttpClient = OkHttpClient.Builder()
            .addInterceptor(logger)
            .addInterceptor(interceptor)
            .build()

        return Retrofit.Builder()
            .baseUrl(BASE_URL)
            .client(okHttpClient)
            .addConverterFactory(GsonConverterFactory.create())
            .build()
            .create( CoinPaprikaApi::class.java)
	    

9. suspendCancellableCoroutine활용법
	suspend fun getCurrentLocation(): Location? {
			.....
			
			return suspendCancellableCoroutine { cont ->
				locationClient.lastLocation.apply {
					if(isComplete) {
						if(isSuccessful) {
							cont.resume(result)
						} else {
							cont.resume(null)
						}
						return@suspendCancellableCoroutine
					}
					addOnSuccessListener {
						cont.resume(it)
					}
					addOnFailureListener {
						cont.resume(null)
					}
					addOnCanceledListener {
						cont.cancel()
					}
				
				}			
			}
		}
