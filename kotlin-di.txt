
리턴값을 구분하기 위해서
아래와 같이 작성한다.

1) 형식 우선 선언하기
@Retention(AnnotationRetention.BINARY)
@Qualifier
annotation class DefaultDispatcher

2) 제공하는 부분 적시 
    @DefaultDispatcher
    @Provides
    fun providesDefaultDispatcher(): CoroutineDispatcher = Dispatchers.Default

3) 사용하기 
  class GetStaffUseCase @Inject constructor(
      private val conferenceRepository: ConferenceRepository,
      @DefaultDispatcher dispatcher: CoroutineDispatcher,
  ) : NonParamCoroutineUseCase<List<User>>(dispatcher) {
      override suspend fun execute(): List<User> {
          return conferenceRepository.getStaff()
              .sortedBy { it.name }
      }
  }
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------

or @Named("xxxx") 
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
다소 사용하는 부분이 틀린것 같다. 
@Qualifier
@Retention(AnnotationRetention.RUNTIME)
annotation class RemoteTasksDataSource

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------

1) 선언하기.
@Qualifier
annotation class InMemoryLogger

@Qualifier
annotation class DatabaseLogger 

2) 제공하기
@InstallIn(ActivityComponent::class)
@Module
abstract class LoggingInMemoryModule {
    @InMemoryLogger
    @ActivityScoped
    @Binds
    abstract fun bindInMemoryLogger(impl: LoggerInMemoryDataSource): LoggerDataSource
}

3) 활용하기
@AndroidEntryPoint
class LogsFragment: Fragment() {
    @InMemoryLogger
    @Inject lateinit var logger: LoggerDataSource
    
    ...
}

