
>>>>> build.gradle(Project level)
buildscript {    
    dependencies {        
        classpath "org.jetbrains.kotlin:kotlin-serialization:1.7.10"
    }
}

>>>>> build.gradle(app level)
id 'kotlinx-serialization'

// Kotlin serialization
implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.2'

implementation("com.jakewharton.retrofit:retrofit2-kotlinx-serialization-converter:0.8.0")
    
    
>>>>> AppModule.kt    
@Provides
@Singleton
fun provideRetrofit(okHttpClient: OkHttpClient): Retrofit {    
    val contentType = "application/json".toMediaType()
    val json = Json {
        ignoreUnknownKeys = true
    }

    return Retrofit.Builder()
        .baseUrl(BASE_URL)
        .client(okHttpClient)
        .addConverterFactory(json.asConverterFactory(contentType))
        .build()
}




Gson 으로 parsing하기

var jsonString = """{"id":1,"description":"Test"}""";
var testModel = gson.fromJson(jsonString, TestModel::class.java)
Assert.assertEquals(testModel.id, 1)
Assert.assertEquals(testModel.description, "Test")

or with kotlinx serialization
implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.2.2")

import kotlinx.serialization.*
import kotlinx.serialization.json.*

@Serializable
data class User(val name: String, val age: Int)
// decoding
fun main() {
    val json = "{ \\\\"name\\\\": \\\\"John\\\\", \\\\"age\\\\": 30 }"
    val user = Json.decodeFromString<User>(json)
    println(user) // User(name=John, age=30)
}


or 
import kotlinx.serialization.*
import kotlinx.serialization.json.*

@Serializable
data class User(val name: String, val age: Int)
// encoding
fun main() {
    val user = User("John", 30)
    val json = Json.encodeToString(user)
    println(json) // {"name":"John","age":30}
}
